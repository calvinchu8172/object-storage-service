'use strict';

// tests for validate access token
// Generated by serverless-mocha-plugin

require('rootpath')();

// ================ ENVs ========================
const SERVICE              = process.env.SERVERLESS_PROJECT;
const REGION               = process.env.SERVERLESS_REGION;
const STAGE                = process.env.SERVERLESS_STAGE;
const API_GATEWAY_INVOKE_URL = process.env.API_GATEWAY_INVOKE_URL;
const PRIVATE_KEY_NAME     = "object";


// ================ Modules =====================
const mochaPlugin          = require('serverless-mocha-plugin');
const request              = require('request');
const expect               = mochaPlugin.chai.expect;
const YAML                 = require('yamljs');
const serverlessYamlObject = YAML.load('serverless.yml');


// ================ Lib/Modules =================
const testHelper           = require('./lib/test_helper');
const signatureGenerator   = require('lib/signature_generator.js')
const ApiErrors            = require( 'lib/api_errors.js' );


// ================== AWS ===================
const AWS                  = require('aws-sdk');
const lambda               = new AWS.Lambda({region: REGION});


const PATH                 = serverlessYamlObject.functions.createObject.events[0].http.path;
const METHOD               = serverlessYamlObject.functions.createObject.events[0].http.method;
const REQUEST_URL          = `${API_GATEWAY_INVOKE_URL}/${PATH}`;


describe('Create Object API', () => {

  let options = {};
  let customs = {};

  beforeEach('Set Request Options', (done) => {
    console.log('Set Request Options....');
    options = {
      method: METHOD,
      url: REQUEST_URL,
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'X-API-Key': 'gap62WLIsd6LGag0RD1IH2HX0RndlQb53bIZqKt7',
        'X-Signature': ''
      },
      form: {
        certificate_serial: '1002',
        access_token: '7eda6dd4de708b1886ed34f6c0460ffef2d9094e5052fb706ad7635cadb8ea8b',
        domain: "test_domain",
        key: "test_key",
        content_type: "image/png",
        content: "{}"
      }
    }; // options

    done();
  }); // beforeEach


  // OSS_004_01
  describe('If the X-Api-Key Header in request is missing', function() {
    it('should return HTTP 403', function(done) {
    
      delete options.headers['X-API-Key'];
      options.headers['X-Signature'] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);
      request(options, (err, response, body) => {
        if (err) done(err); // an error occurred
        else {
          expect(response.statusCode).to.equal(403);
          console.log(response.body);
          done();
        }
      }); // request
    }); // it

  }); // If the X-Api-Key Header in request is missing

  // OSS_004_02
  describe('If the X-Signature Header in request is missing', function() {
    it('should return HTTP 400: { "code": "400.0", "message": "Missing Required Header: X-Signature" }', function(done) {
      
      delete options.headers['X-Signature'];
      request(options, (err, response, body) => {
        if (err) done(err); // an error occurred
        else {
          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.signature.httpStatus);
          console.log(response.body);
          let parsedBody = JSON.parse(body);
          expect(parsedBody).to.have.all.keys(['code', 'message']);
          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);
          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);
          done();
        }
      }); // request
    }); // it

  }); // If the X-Signature Header in request is missing


  // OSS_004_03
  describe('If the certificate_serial param in request is missing', function() {
    it('should return HTTP 400: { "code": "400.2", "message": "Missing Required Parameter: certificate_serial" }', function(done) {
      
      delete options.form['certificate_serial'];
      options.headers['X-Signature'] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);
      request(options, (err, response, body) => {
        if (err) done(err); // an error occurred
        else {
          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.certificate_serial.httpStatus);
          console.log(response.body);
          let parsedBody = JSON.parse(body);
          expect(parsedBody).to.have.all.keys(['code', 'message']);
          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);
          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);
          done();
        }
      }); // request
    }); // it

  }); // If the certificate_serial param in request is missing



  // OSS_004_04
  describe('If the certificate_serial param in request is invalid', function() {
    it('should return HTTP 400: { "code": "400.3", "message": "Invalid certificate_serial" }', function(done) {
      
      options.form['certificate_serial'] = "invalid_certificate_serial";
      options.headers['X-Signature'] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);
      request(options, (err, response, body) => {
        if (err) done(err); // an error occurred
        else {
          expect(response.statusCode).to.equal(ApiErrors.validationFailed.certificate_serial.httpStatus);
          console.log(response.body);
          let parsedBody = JSON.parse(body);
          expect(parsedBody).to.have.all.keys(['code', 'message']);
          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);
          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);
          done();
        }
      }); // request
    }); // it

  }); // If the certificate_serial param in request is invalid


  // OSS_004_05
  describe('If the signature in request failed the verification', function() {
    it('server should return HTTP 400: { "code": "400.1", "message": "Invalid Signature" }', function(done) {
      
      options.headers['X-Signature'] = "invalid_signature";
      request(options, (err, response, body) => {
        if (err) done(err); // an error occurred
        else {
          console.log(response.body);
          expect(response.statusCode).to.equal(ApiErrors.validationFailed.signature.httpStatus);
          let parsedBody = JSON.parse(body);
          expect(parsedBody).to.have.all.keys(['code', 'message']);
          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);
          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);
          done();
        }
      }); // request
    }); // it

  }); // If the signature in request failed the verification


  // OSS_004_06
  describe('If the access_token param in request is missing', function() {
    it('server should return HTTP 400: { "code": "400.6", "message": "Missing Required Parameter: access_token" }', function(done) {
      
      delete options.form['access_token'];
      options.headers['X-Signature'] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);
      request(options, (err, response, body) => {
        if (err) done(err); // an error occurred
        else {
          console.log(response.body);
          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.access_token.httpStatus);
          let parsedBody = JSON.parse(body);
          expect(parsedBody).to.have.all.keys(['code', 'message']);
          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);
          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);
          done();
        }
      }); // request
    }); // it
  }); // If the access_token param in request is missing


  // OSS_004_07
  describe('If the key param in request is invalid', function() {
    it('server should return HTTP 400: { "code": "400.14", "message": "Invalid key" }', function(done) {
      
      options.form['key'] = "123abc";
      options.headers['X-Signature'] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);
      request(options, (err, response, body) => {
        if (err) done(err); // an error occurred
        else {
          console.log(response.body);
          expect(response.statusCode).to.equal(ApiErrors.validationFailed.key.httpStatus);
          let parsedBody = JSON.parse(body);
          expect(parsedBody).to.have.all.keys(['code', 'message']);
          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);
          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);
          done();
        }
      }); // request
    }); // it
  }); // If the key param in request is invalid


  // OSS_004_08
  describe('If the content_type param in request is missing', function() {
    it('should return HTTP 400: { "code": "400.18", "message": "Missing Required Parameter: content_type" }', function(done) {
      
      delete options.form['content_type'];
      options.headers['X-Signature'] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);
      request(options, (err, response, body) => {
        if (err) done(err); // an error occurred
        else {
          console.log(response.body);
          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.content_type.httpStatus);
          let parsedBody = JSON.parse(body);
          expect(parsedBody).to.have.all.keys(['code', 'message']);
          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.content_type.code);
          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.content_type.message);
          done();
        }
      }); // request
    }); // it
  }); // If the content_type param in request is missing


  // OSS_004_09
  describe('If the content_type param in request is invalid', function() {
    it('should return HTTP 400: { "code": "400.19", "message": "Invalid content_type" }', function(done) {
      
      options.form['content_type'] = "invalid_content_type";
      options.headers['X-Signature'] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);
      request(options, (err, response, body) => {
        if (err) done(err); // an error occurred
        else {
          console.log(response.body);
          expect(response.statusCode).to.equal(ApiErrors.validationFailed.content_type.httpStatus);
          let parsedBody = JSON.parse(body);
          expect(parsedBody).to.have.all.keys(['code', 'message']);
          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.content_type.code);
          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.content_type.message);
          done();
        }
      }); // request
    }); // it
  }); // If the content_type param in request is invalid


  // OSS_004_10
  describe('If the content param in request is missing', function() {
    it('should return HTTP 400: { "code": "400.20", "message": "Missing Required Parameter: content" }', function(done) {

      options.form['content_type'] = 'application/json';
      delete options.form['content'];
      options.headers['X-Signature'] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);
      request(options, (err, response, body) => {
        if (err) done(err); // an error occurred
        else {
          console.log(response.body);
          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.content.httpStatus);
          let parsedBody = JSON.parse(body);
          expect(parsedBody).to.have.all.keys(['code', 'message']);
          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.content.code);
          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.content.message);
          done();
        }
      }); // request
    }); // it
  }); // If the content_type param in request is invalid


  // OSS_004_11
  describe('If the content param in request is invalid', function() {
    it('should return HTTP 400: { "code": "400.21", "message": "Invalid content" }', function(done) {

      options.form['content_type'] = 'application/json';
      options.form['content'] = "invalid_content";
      options.headers['X-Signature'] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);
      request(options, (err, response, body) => {
        if (err) done(err); // an error occurred
        else {
          console.log(response.body);
          expect(response.statusCode).to.equal(ApiErrors.validationFailed.content.httpStatus);
          let parsedBody = JSON.parse(body);
          expect(parsedBody).to.have.all.keys(['code', 'message']);
          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.content.code);
          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.content.message);
          done();
        }
      }); // request
    }); // it
  }); // If the content_type param in request is invalid


  // OSS_004_12
  describe('If the access_token param in request is invalid', function() {
    it('should return HTTP 401: { "code": "401.0", "message": "invalid access_token" }', function(done) {

      options.form['access_token'] = 'invalid_access_token';
      options.headers['X-Signature'] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);
      request(options, (err, response, body) => {
        if (err) done(err); // an error occurred
        else {
          console.log(response.body);
          expect(response.statusCode).to.equal(ApiErrors.unauthorized.access_token_invalid.httpStatus);
          let parsedBody = JSON.parse(body);
          expect(parsedBody).to.have.all.keys(['code', 'message']);
          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);
          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);
          done();
        }
      }); // request
    }); // it
  }); // If the content_type param in request is invalid



  // OSS_004_13
  describe('If the access_token param in request is expired', function() {

    
    before('Create Expired Token', function(done) {
      console.log(`Create Expired Token...`);
      options.access_token = "expired_access_token";
      console.log(`options.access_token: ${options.access_token}`);
      testHelper.createAccessToken(options.access_token, 0, (err, data) => {
        if (err) {
          done(err);
        }
        else {
          customs.expired_token_id = data.insertId;
          console.log(`data.insertId: ${data.insertId}`);
          console.log(`customs.expired_token_id: ${customs.expired_token_id}`);
          done();
        }
      }); // registerDevice
    }); // before

    after('Delete Expired Token', function(done) {
      console.log(`Delete Expired Token...`);
      console.log(`expired_token_id: ${customs.expired_token_id}`);
      testHelper.deleteAccessToken(customs.expired_token_id, (err, data) => {
        if (err) done(err);
        else done();
      }); // registerDevice
    }); // before

    it('server should return HTTP 401: { "code": "401.1", "message": "Access Token Expired" }', function(done) {

      options.form['access_token'] = 'expired_access_token';
      options.headers['X-Signature'] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);
      request(options, (err, response, body) => {
        if (err) done(err); // an error occurred
        else {
          console.log(response.body);
          expect(response.statusCode).to.equal(ApiErrors.unauthorized.access_token_expired.httpStatus);
          let parsedBody = JSON.parse(body);
          expect(parsedBody).to.have.all.keys(['code', 'message']);
          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);
          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);
          done();
        }
      }); // request
    }); // it
  }); // If the content_type param in request is invalid



});